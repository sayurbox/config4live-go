// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package config4live

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LiveConfigurationClient is the client API for LiveConfiguration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiveConfigurationClient interface {
	// Find config by name
	FindConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error)
}

type liveConfigurationClient struct {
	cc grpc.ClientConnInterface
}

func NewLiveConfigurationClient(cc grpc.ClientConnInterface) LiveConfigurationClient {
	return &liveConfigurationClient{cc}
}

func (c *liveConfigurationClient) FindConfig(ctx context.Context, in *ConfigRequest, opts ...grpc.CallOption) (*ConfigResponse, error) {
	out := new(ConfigResponse)
	err := c.cc.Invoke(ctx, "/config4live.LiveConfiguration/FindConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiveConfigurationServer is the server API for LiveConfiguration service.
// All implementations must embed UnimplementedLiveConfigurationServer
// for forward compatibility
type LiveConfigurationServer interface {
	// Find config by name
	FindConfig(context.Context, *ConfigRequest) (*ConfigResponse, error)
	mustEmbedUnimplementedLiveConfigurationServer()
}

// UnimplementedLiveConfigurationServer must be embedded to have forward compatible implementations.
type UnimplementedLiveConfigurationServer struct {
}

func (UnimplementedLiveConfigurationServer) FindConfig(context.Context, *ConfigRequest) (*ConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindConfig not implemented")
}
func (UnimplementedLiveConfigurationServer) mustEmbedUnimplementedLiveConfigurationServer() {}

// UnsafeLiveConfigurationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiveConfigurationServer will
// result in compilation errors.
type UnsafeLiveConfigurationServer interface {
	mustEmbedUnimplementedLiveConfigurationServer()
}

func RegisterLiveConfigurationServer(s grpc.ServiceRegistrar, srv LiveConfigurationServer) {
	s.RegisterService(&_LiveConfiguration_serviceDesc, srv)
}

func _LiveConfiguration_FindConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiveConfigurationServer).FindConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config4live.LiveConfiguration/FindConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiveConfigurationServer).FindConfig(ctx, req.(*ConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LiveConfiguration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "config4live.LiveConfiguration",
	HandlerType: (*LiveConfigurationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindConfig",
			Handler:    _LiveConfiguration_FindConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config4live/liveconfiguration.proto",
}
